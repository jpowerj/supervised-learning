eps <- rnorm(n, 0, 0.01)
y <- x + eps
# But make one big outlier
midpoint <- ceiling((3/4)*n)
y[midpoint] <- 0
of_data <- tibble::tibble(x=x, y=y)
# Linear model
lin_model <- lm(y ~ x)
# But now polynomial regression
poly_model <- lm(y ~ poly(x, degree = 10))
#summary(model)
ggplot(of_data, aes(x=x, y=y)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
#  scale_color_manual(name="color", values=c("a","b","c"))
names(summary(poly_model))
summary(poly_model)$r.squared
summary(lin_model)$r.squared
summary(poly_model)$r.squared
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble:tibble(x=x_test, y=y_test)
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x_test, y=y_test)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
#  stat_smooth(method = "lm",
#              formula = y ~ poly(x, 10),
#              se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x_test, y=y_test)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(data=of_data, method = "lm",
formula = y ~ poly(x, 10),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x_test, y=y_test)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(data=of_data, method = "lm",
formula = of_data$y ~ poly(of_data$x, 10),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x_test, y=y_test)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(method = "lm",
formula = of_data$y ~ poly(of_data$x, 10),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
summary(poly_model)
names(summary(poly_model))
names(summary(poly_model))
summary(poly_model)$df
names(summary(poly_model))
summary(poly_model)$terms
x <- seq(from = 0, to = 1, by = 0.1)
n <- length(x)
eps <- rnorm(n, 0, 0.01)
y <- x + eps
# But make one big outlier
midpoint <- ceiling((3/4)*n)
y[midpoint] <- 0
of_data <- tibble::tibble(x=x, y=y)
# Linear model
lin_model <- lm(y ~ x)
# But now polynomial regression
poly_model <- lm(y ~ poly(x, degree = 10, raw=TRUE))
#summary(model)
ggplot(of_data, aes(x=x, y=y)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw=TRUE),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
#  scale_color_manual(name="color", values=c("a","b","c"))
summary(lin_model)$r.squared
summary(poly_model)$r.squared
names(summary(poly_model))
summary(poly_model)$terms
#names(summary(poly_model))
summary(poly_model)$terms
#names(summary(poly_model))
summary(poly_model)$terms
coef(poly_model)
#names(summary(poly_model))
summary(poly_model)$terms
names(coef(poly_model))
ggplot(of_data, aes(x=x_test, y=y_test)) +
stat_smooth(method = "lm",
formula = of_data$y ~ poly(of_data$x, 10),
se = FALSE, aes(color="Polynomial")) +
ggplot(of_data, aes(x=x_test, y=y_test)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
ggplot(of_data, aes(x=x_test, y=y_test)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial"))
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial"))
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
ggplot(of_data_test, ) +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.01)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.05)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a \"Perfect\" Fit",
color = "Model"
) +
global_theme
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a \"Perfect\" Fit: Unseen (Test) Data",
color = "Model"
) +
global_theme
x <- seq(from = 0, to = 1, by = 0.1)
n <- length(x)
eps <- rnorm(n, 0, 0.01)
y <- x + eps
# But make one big outlier
midpoint <- ceiling((3/4)*n)
y[midpoint] <- 0
of_data <- tibble::tibble(x=x, y=y)
# Linear model
lin_model <- lm(y ~ x)
# But now polynomial regression
poly_model <- lm(y ~ poly(x, degree = 10, raw=TRUE))
#summary(model)
ggplot(of_data, aes(x=x, y=y)) +
geom_point(size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw=TRUE),
se = FALSE, aes(color="Polynomial")) +
labs(
title = "Getting a Perfect Fit: Training Data",
color = "Model"
) +
global_theme
#  scale_color_manual(name="color", values=c("a","b","c"))
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a Perfect Fit: Unseen *Test Data*",
color = "Model"
) +
global_theme
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a Perfect Fit: Unseen Test Data",
color = "Model"
) +
global_theme
names(summary(poly_model))
names(summary(poly_model))
summary(poly_model)$residuals
names(summary(poly_model))
get_rss <- function(resids) { return(sum(resids^2)) }
get_rss(summary(poly_model)$residuals)
names(summary(poly_model))
get_rss <- function(resids) { return(sum(resids^2)) }
get_rss(summary(lin_model)$residuals)
get_rss(summary(poly_model)$residuals)
names(summary(poly_model))
get_rss <- function(model) { return(sum(summary(model)$residuals^2)) }
get_rss(lin_model)
get_rss(summary(poly_model)$residuals)
names(summary(poly_model))
get_rss <- function(model) { return(sum(summary(model)$residuals^2)) }
get_rss(lin_model)
get_rss(poly_model)
set.seed(1948)
library(knitr)
library(ggplot2)
library(dplyr)
library(ggforce)
library(patchwork)
global_theme <- ggplot2::theme_classic() + ggplot2::theme(
plot.title = element_text(hjust = 0.5, size = 18),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14, hjust = 0.5),
legend.text = element_text(size = 12),
legend.box.background = element_rect(colour = "black")
)
knitr::opts_chunk$set(fig.align="center")
g_pointsize <- 6
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Global functions
get_rss <- function(model) { return(sum(summary(model)$residuals^2)) }
summary(poly_model)$r.squared
get_rss(poly_model)
summary(lin_model)$r.squared
get_rss(lin_model)
summary(poly_model)$r.squared
get_rss(poly_model)
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
ggplot(of_data, aes(x=x, y=y)) +
stat_smooth(method = "lm",
formula = y ~ poly(x, 10, raw = TRUE),
se = FALSE, aes(color="Polynomial")) +
global_theme +
geom_point(data=of_data_test, aes(x=x_test, y=y_test), size=g_pointsize/2) +
geom_abline(aes(intercept=0, slope=1, color="Linear"), linewidth=1, show.legend = FALSE) +
labs(
title = "Getting a Perfect Fit: Unseen Test Data",
color = "Model"
) +
global_theme
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_pred_test <- predict(lin_model, x_test)
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_pred_test
x_test <- seq(from = 0, to = 1, by = 0.05)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss <- sum(lin_resids_test^2)
lin_rss
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss <- sum(lin_resids_test^2)
lin_rss
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss <- sum(poly_resids_test^2)
poly_rss
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss <- sum(lin_resids_test^2)
lin_rss
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss_test <- sum(poly_resids_test^2)
poly_rss_test
# RSS a little trickier: 1 - RSS/TSS
y_test_mean <- mean(y_test)
poly_tss_test <- sum(y_test - y_test_mean)
poly_r2_test <- 1 - (poly_rss_test/poly_tss_test)
poly_r2_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss <- sum(lin_resids_test^2)
lin_rss
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss_test <- sum(poly_resids_test^2)
poly_rss_test
# RSS a little trickier: 1 - RSS/TSS
y_test_mean <- mean(y_test)
poly_tss_test <- sum(y_test - y_test_mean)
poly_tss_test
poly_r2_test <- 1 - (poly_rss_test/poly_tss_test)
poly_r2_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss <- sum(lin_resids_test^2)
lin_rss
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss_test <- sum(poly_resids_test^2)
poly_rss_test
# RSS a little trickier: 1 - RSS/TSS
y_test_mean <- mean(y_test)
poly_tss_test <- sum((y_test - y_test_mean)^2)
poly_tss_test
poly_r2_test <- 1 - (poly_rss_test/poly_tss_test)
poly_r2_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss_test <- sum(lin_resids_test^2)
lin_rss_test
# Lin R2 = 1 - RSS/TSS
tss_test <- sum((y_test - mean(y_test))^2)
lin_r2_test <- 1 - (lin_rss_test / tss_test)
# Now the poly model
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss_test <- sum(poly_resids_test^2)
poly_rss_test
# RSS
poly_r2_test <- 1 - (poly_rss_test / tss_test)
poly_r2_test
x_test <- seq(from = 0, to = 1, by = 0.1)
n_test <- length(x_test)
eps_test <- rnorm(n_test, 0, 0.04)
y_test <- x_test + eps_test
of_data_test <- tibble::tibble(x=x_test, y=y_test)
lin_y_pred_test <- predict(lin_model, as.data.frame(x_test))
lin_y_pred_test
lin_resids_test <- y_test - lin_y_pred_test
lin_resids_test
lin_rss_test <- sum(lin_resids_test^2)
lin_rss_test
# Lin R2 = 1 - RSS/TSS
tss_test <- sum((y_test - mean(y_test))^2)
lin_r2_test <- 1 - (lin_rss_test / tss_test)
lin_r2_test
# Now the poly model
poly_y_pred_test <- predict(poly_model, as.data.frame(x_test))
poly_resids_test <- y_test - poly_y_pred_test
poly_rss_test <- sum(poly_resids_test^2)
poly_rss_test
# RSS
poly_r2_test <- 1 - (poly_rss_test / tss_test)
poly_r2_test
display.brewer.all()
??display.brewer.all
RColorBrewer::display.brewer.all()
