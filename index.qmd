---
title: "Supervised Learning with Parametric Models"
author: "Jeff Jacobs"
format:
  revealjs:
    smaller: true
    scrollable: true
    footer: "Supervised Learning with Parametric Models"
    css: gtown.css
    df-print: kable
editor: visual
---

```{r setup, include=FALSE}
library(knitr)
library(ggplot2)
library(dplyr)
library(ggforce)
global_theme <- ggplot2::theme_classic() + ggplot2::theme(
  plot.title = element_text(hjust = 0.5, size = 18),
  axis.title = element_text(size = 14),
  axis.text = element_text(size = 12),
  legend.title = element_text(size = 14, hjust = 0.5),
  legend.text = element_text(size = 12),
  legend.box.background = element_rect(colour = "black")
)
knitr::opts_chunk$set(fig.align="center")
g_pointsize <- 6
```

## Supervised vs. Unsupervised Learning

-   **Supervised** Learning: You want the computer to learn the pattern of how *you* are classifying[^1] observations in a dataset
    -   Discovering the relationship between *properties* of observations and *outcomes*
    -   Example (*Binary Classification*): I go through Craigslist looking for used cars, saving the ones I like to one folder and ones I don't like to another
    -   Example (*Regression*): I assign a score from 0-100 to each used car, bassed on how much I like them
-   **Unsupervised** Learning: You want the computer to *figure out* patterns within a dataset, without any predetermined inferences you want it to make
    -   Typically: grouping or clustering observations based on shared properties
    -   Example: I save all the used car listings I can find, and ask the computer to "find a pattern" in this data
    -   ["Exploratory" Data Analysis](https://www.ibm.com/topics/exploratory-data-analysis)

[^1]: Encompassing both standard classification (sorting each observation into a set number of bins) and regression (assigning a real number to each observation)

## Dataset Structures

-   **Supervised** Learning: Dataset has both *explanatory* variables [("features")]{.colA} and *response* variables [("labels")]{.colB}

```{r}
sup_data <- tibble::tribble(
  ~home_id, ~sqft, ~bedrooms, ~liked,
  0, 1000, 1, FALSE,
  1, 2000, 2, TRUE,
  2, 2500, 1, TRUE,
  3, 1500, 2, FALSE
)
```

::: suptable
```{r}
sup_data
```
:::

-   **Unsupervised** Learning: Dataset has only *explanatory* variables

```{r}
unsup_data <- tibble::tribble(
  ~home_id, ~sqft, ~bedrooms,
  0, 1000, 1,
  1, 2000, 2,
  2, 2500, 1,
  3, 1500, 2
)
```

::: unsuptable
```{r}
unsup_data
```
:::

## Dataset Structures

:::: {.columns}

::: {.column width="50%"}

```{r, fig.width=5, fig.height=5.5}
ggplot(sup_data, aes(x=sqft, y=bedrooms, color=liked)) + 
  geom_point(size=g_pointsize) +
  labs(
    title = "Supervised Data: House Listings",
    x = "Square Footage",
    y = "Number of Bedrooms",
    color = "Liked?"
  ) +
  global_theme
```
:::

::: {.column width="50%"}

```{r, fig.width=5, fig.height=5.5}
ggplot(unsup_data, aes(x=sqft, y=bedrooms)) + 
  geom_point(size=g_pointsize) +
  labs(
    x = "Square Footage",
    y = "Number of Bedrooms",
    color = "Liked?"
  ) +
  global_theme +
  ggtitle("Unsupervised Data: House Listings")
```
:::

::::

## Different Goals


:::: {.columns}

::: {.column width="50%"}

```{r, fig.width=5, fig.height=5.5}
ggplot(sup_data, aes(x=sqft, y=bedrooms, color=liked)) + 
  geom_point(size=g_pointsize) +
  labs(
    title = "Supervised Data: House Listings",
    x = "Square Footage",
    y = "Number of Bedrooms",
    color = "Liked?"
  ) +
  global_theme +
  geom_vline(xintercept = 1750, linetype="dashed", color = "black", size=1) +
  annotate('rect', xmin=-Inf, xmax=1750, ymin=-Inf, ymax=Inf, alpha=.2, fill='red') +
  annotate('rect', xmin=1750, xmax=Inf, ymin=-Inf, ymax=Inf, alpha=.2, fill='blue')
  #geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=0, ymax=Inf, alpha=.2, fill='red'))
```
:::

::: {.column width="50%"}

```{r, fig.width=5, fig.height=5.5}
unsup_grouped <- unsup_data %>% mutate(big=bedrooms > 1)
ggplot(unsup_grouped, aes(x=sqft, y=bedrooms)) + 
  geom_mark_ellipse(expand=0.1, aes(fill=big), size = 1.2) +
  geom_point(size=g_pointsize) +
  labs(
    x = "Square Footage",
    y = "Number of Bedrooms"
  ) +
  global_theme +
  ggtitle("Unsupervised Data: House Listings") +
  theme(legend.position = "none") +
  expand_limits(x=c(800,2700), y=c(0.8,2.2))
  #geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=2)
  #stat_ellipse(data=unsup_data %>% dplyr::filter(bedrooms <= 1))
```
:::

::::

## Cross-Validation



## Model

## Loss Functions and Error Measures

## Regularization

## Numerical Optimization

## Hyperparameter Tuning

## Prediction

## Lab

## Q & A
